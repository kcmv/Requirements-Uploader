# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  branches:
    include:
      - master
      - staging
      - uat
      - dev

pr:
  - master
  - staging
  - uat
  - dev
  
variables:
  webAppName: $(webName)
  prodEnvironmentName: "api_prod"
  devEnvironmentName: "api_dev"
  vmImageName: "ubuntu-latest"
  nodeVersion: "14.x"
  
  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/dev') }}:
    branchName: "dev"
    DeployTo: "DeployToDev"
    environmentName: "api_dev"
  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/uat') }}:
    branchName: "uat"
    DeployTo: "DeployToUAT"
    environmentName: "api_uat"
  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/staging') }}:
    branchName: "staging"
    DeployTo: "DeployToStaging"
    environmentName: "api_staging"
  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
    branchName: "master"
    DeployTo: "DeployToProduction"
    environmentName: "api_prod"

stages:
  - stage: Test
    condition: eq(variables['Build.Reason'], 'PullRequest')
    displayName: Test PR
    jobs:
      - job: BuildJob
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: $(nodeVersion)
            displayName: "Install Node.js"
  
          - script: |
              yarn install
              yarn run build
              cp -a package.json dist
              cp -a package-lock.json dist
              cd dist
              yarn install
              cd -
            displayName: 'npm install and build'

  - stage: Build
    condition: eq(variables['Build.Reason'], 'IndividualCI')
    displayName: Build stage
    jobs:
      - job: BuildJob
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: $(nodeVersion)
            displayName: "Install Node.js"
  
          - script: |
              yarn install
              yarn run build
              cp -a package.json dist
              cp -a package-lock.json dist
              cd dist
              yarn install
              cd -
            displayName: 'npm install and build'

          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/dist'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(branchName).zip'
              replaceExistingArchive: true
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'drop'
              publishLocation: 'Container'    

  - stage: DeployToStaging
    dependsOn: Build
    condition: and(ne(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.Reason'], 'IndividualCI'))
    jobs:
      - deployment: Deploy
        displayName: $(DeployTo)
        environment: $(devEnvironmentName)
        pool:
          vmIMage: $(vmImageName)
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureRmWebAppDeployment@4
                  displayName: "Azure App Service Deploy Staging"
                  inputs:
                    ConnectionType: "AzureRM"
                    azureSubscription: $(azureSubscription)
                    appType: "webAppLinux"
                    WebAppName: $(webAppName)
                    deployToSlotOrASE: true
                    SlotName: $(branchName)
                    ResourceGroupName: $(RgName)
                    packageForLinux: "$(Pipeline.Workspace)/drop/$(branchName).zip"
                    RuntimeStack: "NODE|14-lts"
                    StartupCommand: "node main.js"

  - stage: DeployToProduction
    dependsOn: Build
    condition: and(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.Reason'], 'IndividualCI'))
    jobs:
        - deployment: Deploy
          displayName: "Deploy to Production"
          environment: $(prodEnvironmentName)
          pool:
            vmIMage: $(vmImageName)
          strategy:
              runOnce:
                deploy:
                  steps:
                  - task: AzureAppServiceManage@0
                    inputs:
                      azureSubscription: $(azureSubscription)
                      Action: 'Swap Slots'
                      WebAppName: $(webAppName)
                      ResourceGroupName: $(RgName)
                      SourceSlot: 'staging'
